name: Deploy to Azure Container App

on:
  workflow_call: # Makes this workflow reusable by other workflows
    inputs:
      environment:
        description: 'Environment to use for secrets'
        required: false
        type: string
        default: 'deploy-env'
      image_name:
        description: 'Container image name'
        required: false
        type: string
        default: 'mpzsql'
      image_tag:
        description: 'Container image tag'
        required: true
        type: string
      registry_name:
        description: 'Azure Container Registry name'
        required: true
        type: string
  workflow_dispatch: # Allows manual triggering
    inputs:
      environment:
        description: 'Environment to use for secrets'
        required: false
        type: choice
        default: 'deploy-env'
        options:
        - deploy-env
        - staging
        - prod
      image_name:
        description: 'Container image name'
        required: false
        type: string
        default: 'mpzsql'
      image_tag:
        description: 'Container image tag'
        required: true
        type: string
      registry_name:
        description: 'Azure Container Registry name'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Azure Container App 
    environment: ${{ inputs.environment || 'deploy-env' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Read infrastructure parameters
      id: infra-params
      run: |
        echo "üìã Reading infrastructure parameters from main.bicepparam..."
        cd INFRA-NEW
        
        # Parse bicepparam file to get appName and environmentName
        APP_NAME=$(grep "param appName" main.bicepparam | sed "s/.*= *'\([^']*\)'.*/\1/")
        ENV_NAME=$(grep "param environmentName" main.bicepparam | sed "s/.*= *'\([^']*\)'.*/\1/")
        
        if [ -z "$APP_NAME" ] || [ -z "$ENV_NAME" ]; then
          echo "‚ùå Could not parse appName or environmentName from main.bicepparam"
          echo "APP_NAME: $APP_NAME"
          echo "ENV_NAME: $ENV_NAME"
          exit 1
        fi
        
        # Calculate container app name based on bicep logic: ${appName}-${environmentName}-app
        CONTAINER_APP_NAME="${APP_NAME}-${ENV_NAME}-app"
        RESOURCE_GROUP="RG-MPZSQL"  # Based on workflows-deploy-new-infra.yml
        
        echo "app_name=${APP_NAME}" >> $GITHUB_OUTPUT
        echo "environment_name=${ENV_NAME}" >> $GITHUB_OUTPUT
        echo "container_app_name=${CONTAINER_APP_NAME}" >> $GITHUB_OUTPUT
        echo "resource_group=${RESOURCE_GROUP}" >> $GITHUB_OUTPUT
        
        echo "‚úÖ Infrastructure parameters:"
        echo "   App Name: ${APP_NAME}"
        echo "   Environment: ${ENV_NAME}"
        echo "   Container App: ${CONTAINER_APP_NAME}"
        echo "   Resource Group: ${RESOURCE_GROUP}"

    - name: Find Container App
      id: find-app
      run: |
        echo "üîç Finding Azure Container App..."
        
        CONTAINER_APP_NAME="${{ steps.infra-params.outputs.container_app_name }}"
        RESOURCE_GROUP="${{ steps.infra-params.outputs.resource_group }}"
        
        # Check if the container app exists
        APP_EXISTS=$(az containerapp show \
          --name "${CONTAINER_APP_NAME}" \
          --resource-group "${RESOURCE_GROUP}" \
          --query "name" \
          --output tsv 2>/dev/null || echo "")
        
        if [ -z "$APP_EXISTS" ]; then
          echo "‚ùå Container App '${CONTAINER_APP_NAME}' not found in resource group '${RESOURCE_GROUP}'"
          echo "Available container apps in resource group:"
          az containerapp list --resource-group "${RESOURCE_GROUP}" --query "[].name" --output table
          exit 1
        fi
        
        echo "‚úÖ Found Container App: ${CONTAINER_APP_NAME}"

    - name: Find Azure Container Registry
      id: find-registry
      run: |
        echo "üîç Finding Azure Container Registry..."
        
        REGISTRY_NAME="${{ inputs.registry_name }}"
        
        # Verify the registry exists and get its resource ID
        REGISTRY_RESOURCE_ID=$(az acr show \
          --name "${REGISTRY_NAME}" \
          --query "id" \
          --output tsv 2>/dev/null || echo "")
        
        if [ -z "$REGISTRY_RESOURCE_ID" ]; then
          echo "‚ùå Azure Container Registry '${REGISTRY_NAME}' not found"
          echo "Available registries:"
          az acr list --query "[].{Name:name, ResourceGroup:resourceGroup}" --output table
          exit 1
        fi
        
        echo "registry_resource_id=${REGISTRY_RESOURCE_ID}" >> $GITHUB_OUTPUT
        echo "‚úÖ Found Azure Container Registry: ${REGISTRY_NAME}"
        echo "   Resource ID: ${REGISTRY_RESOURCE_ID}"

    - name: Configure Container App Authentication
      run: |
        echo "üîê Configuring Container App authentication for ACR..."
        
        CONTAINER_APP_NAME="${{ steps.infra-params.outputs.container_app_name }}"
        RESOURCE_GROUP="${{ steps.infra-params.outputs.resource_group }}"
        REGISTRY_RESOURCE_ID="${{ steps.find-registry.outputs.registry_resource_id }}"
        
        # Check if managed identity is already enabled
        echo "   Checking managed identity status..."
        EXISTING_PRINCIPAL_ID=$(az containerapp identity show \
          --name "${CONTAINER_APP_NAME}" \
          --resource-group "${RESOURCE_GROUP}" \
          --query "principalId" \
          --output tsv 2>/dev/null || echo "")
        
        if [ -n "$EXISTING_PRINCIPAL_ID" ] && [ "$EXISTING_PRINCIPAL_ID" != "null" ]; then
          echo "   ‚úÖ Managed identity already exists with principal ID: ${EXISTING_PRINCIPAL_ID}"
          PRINCIPAL_ID="$EXISTING_PRINCIPAL_ID"
        else
          # Enable system-assigned managed identity for the Container App
          echo "   Enabling system-assigned managed identity..."
          PRINCIPAL_ID=$(az containerapp identity assign \
            --name "${CONTAINER_APP_NAME}" \
            --resource-group "${RESOURCE_GROUP}" \
            --system-assigned \
            --query "principalId" \
            --output tsv)
          
          if [ -z "$PRINCIPAL_ID" ] || [ "$PRINCIPAL_ID" = "null" ]; then
            echo "‚ùå Failed to get principal ID for managed identity"
            exit 1
          fi
          
          echo "   ‚úÖ Managed identity created with principal ID: ${PRINCIPAL_ID}"
          
          # Wait a moment for the managed identity to propagate
          echo "   Waiting for managed identity to propagate..."
          sleep 10
        fi
        
        # Check if role assignment already exists
        echo "   Checking AcrPull role assignment..."
        EXISTING_ASSIGNMENT=$(az role assignment list \
          --assignee "${PRINCIPAL_ID}" \
          --role "AcrPull" \
          --scope "${REGISTRY_RESOURCE_ID}" \
          --query "[0].id" \
          --output tsv 2>/dev/null || echo "")
        
        if [ -n "$EXISTING_ASSIGNMENT" ] && [ "$EXISTING_ASSIGNMENT" != "null" ]; then
          echo "   ‚úÖ AcrPull role assignment already exists"
        else
          # Assign AcrPull role to the managed identity for the ACR
          echo "   Assigning AcrPull role to managed identity..."
          az role assignment create \
            --assignee "${PRINCIPAL_ID}" \
            --role "AcrPull" \
            --scope "${REGISTRY_RESOURCE_ID}" \
            --only-show-errors
          
          echo "   ‚úÖ AcrPull role assignment created"
          
          # Wait for role assignment to propagate
          echo "   Waiting for role assignment to propagate..."
          sleep 15
        fi
        
        echo "‚úÖ Container App authentication configured successfully"

    - name: Get Infrastructure Deployment Outputs
      id: get-outputs
      run: |
        echo "üì§ Getting infrastructure deployment outputs..."
        
        RESOURCE_GROUP="${{ steps.infra-params.outputs.resource_group }}"
        
        # Get the latest successful infrastructure deployment
        DEPLOYMENT_NAME=$(az deployment group list \
          --resource-group "${RESOURCE_GROUP}" \
          --query "[?properties.provisioningState=='Succeeded'] | sort_by(@, &properties.timestamp) | [-1].name" \
          --output tsv)
        
        if [ -z "$DEPLOYMENT_NAME" ]; then
          echo "‚ùå No successful infrastructure deployment found"
          exit 1
        fi
        
        echo "üìã Using deployment: ${DEPLOYMENT_NAME}"
        
        # Get all outputs to see what's available
        echo "Available deployment outputs:"
        az deployment group show \
          --resource-group "${RESOURCE_GROUP}" \
          --name "${DEPLOYMENT_NAME}" \
          --query "properties.outputs" \
          --output json | jq 'keys'
        
        # Try to find user-assigned identity from container app environment or resource group
        CONTAINER_APP_NAME="${{ steps.infra-params.outputs.container_app_name }}"
        APP_NAME="${{ steps.infra-params.outputs.app_name }}"
        ENV_NAME="${{ steps.infra-params.outputs.environment_name }}"
        
        # Method 1: Get from container app's managed environment
        MANAGED_ENV_NAME=$(az containerapp show \
          --name "${CONTAINER_APP_NAME}" \
          --resource-group "${RESOURCE_GROUP}" \
          --query "properties.managedEnvironmentId" \
          --output tsv | sed 's|.*/||')
        
        if [ -n "$MANAGED_ENV_NAME" ]; then
          echo "üìã Found managed environment: ${MANAGED_ENV_NAME}"
          
          # Look for user-assigned identity in the managed environment
          USER_IDENTITY_RESOURCE_ID=$(az containerapp env show \
            --name "${MANAGED_ENV_NAME}" \
            --resource-group "${RESOURCE_GROUP}" \
            --query "properties.workloadProfiles[0].name" \
            --output tsv 2>/dev/null || echo "")
        fi
        
        # Method 2: Search by naming convention if not found
        if [ -z "$USER_IDENTITY_RESOURCE_ID" ] || [ "$USER_IDENTITY_RESOURCE_ID" = "null" ]; then
          echo "üîç Searching for user-assigned identity by naming convention..."
          
          # Try common naming patterns
          for IDENTITY_NAME in "${APP_NAME}-${ENV_NAME}-identity" "${APP_NAME}-identity" "${ENV_NAME}-identity"; do
            IDENTITY_ID=$(az identity show \
              --name "${IDENTITY_NAME}" \
              --resource-group "${RESOURCE_GROUP}" \
              --query "id" \
              --output tsv 2>/dev/null || echo "")
            
            if [ -n "$IDENTITY_ID" ] && [ "$IDENTITY_ID" != "null" ]; then
              USER_IDENTITY_RESOURCE_ID="$IDENTITY_ID"
              echo "‚úÖ Found user-assigned identity: ${IDENTITY_NAME}"
              break
            fi
          done
        fi
        
        # Method 3: Get the first available user-assigned identity
        if [ -z "$USER_IDENTITY_RESOURCE_ID" ] || [ "$USER_IDENTITY_RESOURCE_ID" = "null" ]; then
          echo "üîç Getting first available user-assigned identity..."
          USER_IDENTITY_RESOURCE_ID=$(az identity list \
            --resource-group "${RESOURCE_GROUP}" \
            --query "[0].id" \
            --output tsv 2>/dev/null || echo "")
          
          if [ -n "$USER_IDENTITY_RESOURCE_ID" ] && [ "$USER_IDENTITY_RESOURCE_ID" != "null" ]; then
            echo "‚úÖ Using first available identity"
          fi
        fi
        
        if [ -z "$USER_IDENTITY_RESOURCE_ID" ] || [ "$USER_IDENTITY_RESOURCE_ID" = "null" ]; then
          echo "‚ùå Could not find user-assigned identity"
          echo "Available identities in resource group:"
          az identity list --resource-group "${RESOURCE_GROUP}" --query "[].{Name:name, ResourceId:id}" --output table
          exit 1
        fi
        
        echo "user_identity_resource_id=${USER_IDENTITY_RESOURCE_ID}" >> $GITHUB_OUTPUT
        echo "‚úÖ User-assigned identity resource ID: ${USER_IDENTITY_RESOURCE_ID}"

    - name: Configure Container App Registry Authentication
      run: |
        echo "üîê Configuring Container App registry authentication..."
        
        CONTAINER_APP_NAME="${{ steps.infra-params.outputs.container_app_name }}"
        RESOURCE_GROUP="${{ steps.infra-params.outputs.resource_group }}"
        REGISTRY_NAME="${{ inputs.registry_name }}"
        REGISTRY_SERVER="${REGISTRY_NAME}.azurecr.io"
        
        # Get the user-assigned managed identity resource ID from deployment outputs
        USER_IDENTITY_RESOURCE_ID="${{ steps.get-outputs.outputs.user_identity_resource_id }}"
        
        echo "   Configuring registry server: ${REGISTRY_SERVER}"
        echo "   Using managed identity: ${USER_IDENTITY_RESOURCE_ID}"
        
        # Check if registry is already configured
        EXISTING_REGISTRY=$(az containerapp registry list \
          --name "${CONTAINER_APP_NAME}" \
          --resource-group "${RESOURCE_GROUP}" \
          --query "[?server=='${REGISTRY_SERVER}'].server | [0]" \
          --output tsv 2>/dev/null || echo "")
        
        if [ -n "$EXISTING_REGISTRY" ] && [ "$EXISTING_REGISTRY" != "null" ]; then
          echo "   ‚úÖ Registry authentication already configured for: ${REGISTRY_SERVER}"
        else
          echo "   Configuring registry authentication..."
          az containerapp registry set \
            --name "${CONTAINER_APP_NAME}" \
            --resource-group "${RESOURCE_GROUP}" \
            --server "${REGISTRY_SERVER}" \
            --identity "${USER_IDENTITY_RESOURCE_ID}"
          
          echo "   ‚úÖ Registry authentication configured successfully"
        fi
        
        echo "‚úÖ Container App registry authentication configured"

    - name: Update Container App Environment Variables
      run: |
        echo "üîß Updating Container App environment variables..."
        
        CONTAINER_APP_NAME="${{ steps.infra-params.outputs.container_app_name }}"
        RESOURCE_GROUP="${{ steps.infra-params.outputs.resource_group }}"
        
        # Set environment variables from GitHub secrets (NOT as Azure secrets)
        az containerapp update \
          --name "${CONTAINER_APP_NAME}" \
          --resource-group "${RESOURCE_GROUP}" \
          --set-env-vars \
            POSTGRESQL_SERVER="${{ secrets.POSTGRESQL_SERVER }}" \
            POSTGRESQL_USER="${{ secrets.POSTGRESQL_USER }}" \
            POSTGRESQL_PORT="${{ secrets.POSTGRESQL_PORT }}" \
            POSTGRESQL_CATALOGDB="${{ secrets.POSTGRESQL_CATALOGDB }}" \
            POSTGRESQL_PASSWORD="${{ secrets.POSTGRESQL_PASSWORD }}" \
            LOGFIRE_WRITE_TOKEN="${{ secrets.LOGFIRE_WRITE_TOKEN }}" \
            AZURE_STORAGE_ACCOUNT="${{ secrets.AZURE_STORAGE_ACCOUNT }}" \
            AZURE_STORAGE_CONTAINER="${{ secrets.AZURE_STORAGE_CONTAINER }}" \
            LETSENCRYPT_CERT="${{ secrets.LETSENCRYPT_CERT }}" \
            LETSENCRYPT_KEY="${{ secrets.LETSENCRYPT_KEY }}"
        
        echo "‚úÖ Environment variables updated successfully"

    - name: Update Container App Image
      run: |
        echo "üöÄ Updating Container App with new image..."
        
        CONTAINER_APP_NAME="${{ steps.infra-params.outputs.container_app_name }}"
        RESOURCE_GROUP="${{ steps.infra-params.outputs.resource_group }}"
        REGISTRY_NAME="${{ inputs.registry_name }}"
        IMAGE_NAME="${{ inputs.image_name }}"
        IMAGE_TAG="${{ inputs.image_tag }}"
        
        FULL_IMAGE_NAME="${REGISTRY_NAME}.azurecr.io/${IMAGE_NAME}:${IMAGE_TAG}"
        
        echo "üì¶ Updating to image: ${FULL_IMAGE_NAME}"
        
        # Update the container app with the new image, specifying the container name
        # The container name 'ducklake-app' is defined in the Bicep infrastructure template
        az containerapp update \
          --name "${CONTAINER_APP_NAME}" \
          --resource-group "${RESOURCE_GROUP}" \
          --container-name "ducklake-app" \
          --image "${FULL_IMAGE_NAME}"
        
        echo "‚úÖ Container App updated with new image"

    - name: Verify Deployment
      run: |
        echo "üîç Verifying deployment..."
        
        CONTAINER_APP_NAME="${{ steps.infra-params.outputs.container_app_name }}"
        RESOURCE_GROUP="${{ steps.infra-params.outputs.resource_group }}"
        
        # Get the current status of the container app
        APP_STATUS=$(az containerapp show \
          --name "${CONTAINER_APP_NAME}" \
          --resource-group "${RESOURCE_GROUP}" \
          --query "properties.provisioningState" \
          --output tsv)
        
        # Get the current image for the ducklake-app container
        CURRENT_IMAGE=$(az containerapp show \
          --name "${CONTAINER_APP_NAME}" \
          --resource-group "${RESOURCE_GROUP}" \
          --query "properties.template.containers[?name=='ducklake-app'].image | [0]" \
          --output tsv)
        
        # Get the app URL
        APP_URL=$(az containerapp show \
          --name "${CONTAINER_APP_NAME}" \
          --resource-group "${RESOURCE_GROUP}" \
          --query "properties.configuration.ingress.fqdn" \
          --output tsv)
        
        echo "üìã Deployment Status:"
        echo "   Container App: ${CONTAINER_APP_NAME}"
        echo "   Status: ${APP_STATUS}"
        echo "   Current Image: ${CURRENT_IMAGE}"
        echo "   App URL: https://${APP_URL}"
        
        if [ "$APP_STATUS" = "Succeeded" ]; then
          echo "‚úÖ Deployment verified successfully!"
        else
          echo "‚ö†Ô∏è Deployment status is: ${APP_STATUS}"
          echo "   This may be normal if the update is still in progress."
        fi

    - name: Summary
      run: |
        echo "üéâ Container App deployment completed!"
        echo ""
        echo "üìã Summary:"
        echo "  Container App: ${{ steps.infra-params.outputs.container_app_name }}"
        echo "  Resource Group: ${{ steps.infra-params.outputs.resource_group }}"
        echo "  Image: ${{ inputs.registry_name }}.azurecr.io/${{ inputs.image_name }}:${{ inputs.image_tag }}"
        echo ""
        echo "‚úÖ Environment variables have been updated"
        echo "‚úÖ Container image has been updated and activated"

    - name: Log out from Azure
      if: always()
      run: |
        az logout
        az cache purge
        az account clear